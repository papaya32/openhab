import org.openhab.core.library.types.*
import org.openhab.core.persistence.*
import org.openhab.model.script.actions.*
import org.joda.time.*
import java.util.*
import java.util.concurrent.locks.*

var Map lastStateMap = new HashMap()
var Lock lock = new ReentrantLock()

rule "Post changes to Dashing Dashboard"
when
        Item gDashboard received update
then
        lock.lock()
        logInfo("Dashboard","Dashing group rule triggered.")
        gDashboard?.members.forEach[t |
                        var lastState = lastStateMap.put(t.name, t.state)
                        if (lastState != t.state || lastState == null) {

                                val DASHING_TOKEN = '"auth_token" : "24518000tablet"'
                                val DASHING_URI = "http://192.168.1.114:3030/widgets/"

                                ///logInfo("Dashboard","Item " + item.name + " changed.")
                                logInfo("Dashboard","Item " + t.name + " has changed state from " +lastState.toString + " to: " + t.state.toString)
                                var uri = DASHING_URI + t.name
                                var json = '{' + DASHING_TOKEN + ', '

                                if (t.state.toString.startsWith("{")){
                                        var internalJSON = t.state.toString.substring(1) //remove opening '{' as the string will be concatenated with our prefix items
                                        //internalJSON = internalJSON.substring(0,internalJSON.length() - 1)
                                        json = json +  t.state.toString.substring(1)
                                        logInfo ("Dashboard","[Debug] json = " + json)
                                } else{
                                        json = json + ' "state" : "' + t.state.toString + '"}'
                                }

                                logInfo ("Dashboard", "POSTING: " + json)
                                logInfo ("Dashboard", "URI: " + uri + "; JSON = " + json )
                                sendHttpPostRequest(uri, "HTTP.CONTENT_TYPE_JSON", json)
                        }
                ]
        lock.unlock()
end


rule "Central Heating Dashboard widget update"
when
        Item targetTemp received update or
        Item targetTemp received command or
        Item roomTemp received update or
        Item roomTemp received command or
	Item dashboardUpdate received command
then
        //Need to ensure that the new status string is a valid json, as otherwise when dashing gets the state property directly, it will fail

        //logInfo("Dashboard","Updating heating status Dashboard widget")
        var String status = '{"temperature" : ' + roomTemp.state.toString + ', "target" : ' + targetTemp.state.toString  + '}'
        postUpdate(thermoTemp,status)
end



/*rule "strings send tool/rule"
when
        Item targetTemp received update or
        Item roomTemp received update or
        Item targetTemp received command or
        Item roomTemp received command or
        Item fan_state received update or
        Item fan_state received command
then
        //Need to ensure that the new status string is a valid json, as otherwise when dashing gets the state property directly, it will fail

        logInfo("Dashboard","Updating heating status Dashboard widget")
        var String targetStatus = '{"target" : ' + targetTemp.state.toString  + '}'
        var String roomStatus = '{"temperature" : ' + roomTemp.state.toString + '}'
        var String fanStatus = '{"fan_state" : ' + fan_state.state.toString + '}'

        postUpdate(targetTemp, targetStatus)
        postUpdate(roomTemp, roomStatus)
        postUpdate(fanVar, fanStatus)
end */


rule "increse target temperature"
when
        Item changeTemp received command ON
then
        var temp = targetTemp.state as DecimalType
        temp = temp + 0.5
        targetTemp.sendCommand(temp)
end

rule "decrease target temperature"
when
        Item changeTemp received command OFF
then
        var temp = targetTemp.state as DecimalType
        temp = temp - 0.5
        targetTemp.sendCommand(temp)
end

rule "make the thermo right color"
when
        Item heatac received update or
        Item heatac received command
then
        logInfo("Thermo", "We're trying to make the thermo the right color")
        var temp = targetTemp.state as DecimalType
        targetTemp.sendCommand(temp)
end

